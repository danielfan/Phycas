<?xml version="1.0" encoding="UTF-8"?>
<xs:schema 
    xmlns:phyc="http://commandLanguage.phycas.org"
    xmlns:xs="http://www.w3.org/2001/XMLSchema" 
    targetNamespace="http://commandLanguage.phycas.org" 
    attributeFormDefault="unqualified">
    <xs:element name="command_list">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="head" type="phyc:Pise_header" minOccurs="0"/>
                <xs:element name="command_set" type="phyc:command_set" maxOccurs="unbounded"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>
    <xs:complexType name="command_set">
        <xs:annotation>
            <xs:documentation>Related set of commands (e.g. each command_set corresponds to a menu
                in our simple GUI)</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="command" type="phyc:command" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="name" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>Name of menu (or sub-menu) displayed to the user</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="user_interface" type="phyc:cmd_user_interface_enum" use="optional">
            <xs:annotation>
                <xs:documentation>Describes which form of the exectuable (gui|console|batch) the
                    command set pertains to. Used to filter the command_sets when generating the UI.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
    <xs:complexType name="command">
        <xs:annotation>
            <xs:documentation>Command used to perform an analysis in the program (similar to a
                parameter with a paragraph in Pise)</xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="phyc:base_command">
                <xs:sequence>
                    <xs:element name="cmd_param_group" type="phyc:cmd_param_group" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
            </xs:extension>
            <!--xs:sequence>
                    <xs:element name="cmd_param" type="phyc:cmd_param" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence-->
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="base_command">
        <xs:annotation>
            <xs:documentation>Fields that all commands need (regardless of whether or not they take
                additional parameters)</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="availability" type="phyc:test_wrapper" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>Specifies a run-time test that must evaluate to True for the
                        command to be available</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="requirement" type="phyc:test_wrapper" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>Specifies a run-time test of the command's parameters that
                        must evalate to True for the command to be callable (used to describe tests
                        that are difficult to express in terms of the individual command parameter
                        validation fields - minimum, maximum, etc.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="format" type="phyc:command_format"/>
            <xs:element name="description" type="xs:string">
                <xs:annotation>
                    <xs:documentation>Description to be displayed when the user needs help.
                        (equivalent to Pise's comment/value element)</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="phycas_impl" type="phyc:phycas_command_impl" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>Contains information about the phycas implementation -- used
                        to create setup function that instantiates the NCL parser for the text
                        command and the settings structure used internally in phycas to hold the
                        user's options</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="label" type="xs:string" use="required">
            <xs:annotation>
                <xs:documentation>The string associated with the command parameter in the command
                    line (name in Pise).</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="compilation_target" type="phyc:comp_target" use="required"/>
        <xs:attribute name="user_interface" type="phyc:cmd_user_interface_enum" use="optional"/>
        <xs:attribute name="gui_order" type="xs:integer" use="required"/>
    </xs:complexType>
    <xs:complexType name="command_format">
        <xs:annotation>
            <xs:documentation>Poorly developed. This field should describe how to issue the command
                - i.e. compose the command if the GUI is used to generate text commands and give
                them to an interpretter. Currently we are just using the user_hint (to display to
                users) and the expecting the format attribute to be nexus - the other elements are place-holders</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="user_hint" type="xs:string" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>String to display to a console user to provide a template for
                        typing the command</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="language" type="xs:string" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>Used with code element to describe how to format the content
                        into a text string if the format style attribute generic (modelled after
                        Pise's format:language)</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="code" type="xs:string" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>Used with langauge element to describe how to format the
                        content into a text string if the format style attribute generic (modelled
                        after Pise's format:code)</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="style" type="phyc:cmd_format_style"/>
    </xs:complexType>
    <xs:simpleType name="cmd_format_style">
        <xs:annotation>
            <xs:documentation>Describes the style of writing the text representation of a command
                (or generic if the substitution is described in code)</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="nexus"/>
            <xs:enumeration value="nexus_def"/>
            <xs:enumeration value="command_file"/>
            <xs:enumeration value="generic"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:complexType name="cmd_param_group">
        <xs:annotation>
            <xs:documentation>Element that groups related command parameters. This allows a gui to
                display complex commands in an intuitive manner (similar to a paragraph in Pise).</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="cmd_param" type="phyc:cmd_param" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="gui_order" type="xs:integer" use="required"/>
        <xs:attribute name="name" type="xs:string">
            <xs:annotation>
                <xs:documentation>Name used in the GUI as a label for a box or wizard page that
                    groups the command parameters.</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
    <xs:complexType name="Pise_header">
        <xs:annotation>
            <xs:documentation>Header for general information pertaining to the executable. This
                element was designed to mimic Pise:head</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="title" type="xs:string">
                <xs:annotation>
                    <xs:documentation>Name of the executable (and prefix for files in the Pise system)</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="version" type="xs:string" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>Version number. Separated with periods</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="description" type="xs:string" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>Brief description of the executable</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="authors" type="xs:string" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>Comma-separated list of authors</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="reference" type="xs:string" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>Raw bibliographic citation</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="category" type="xs:string" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>databases searches|sequence format conversions|sequences
                        alignments and comparisons|phylogeny|search genes and coding regions|pattern
                        search and discovery, HMM|sequence tools|protein Sequence analysis|DNA
                        sequence analysis|RNA analysis|structure analysis</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="doclink" type="xs:anyURI" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>URL to documentation</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="base_cmd_param">
        <xs:annotation>
            <xs:documentation>elements needed by cmd_params of all types</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="description" type="xs:string"/>
            <xs:element name="gui_description" type="phyc:rest_gui_desc"/>
            <xs:element name="user_level" type="xs:string"/>
            <!--xs:element name="default" type="phyc:cmd_param_def_element"/>
            <xs:element name="type_info" type="xs:string"/-->
            <xs:element name="availability" type="phyc:test_wrapper" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="requirement" type="phyc:test_wrapper" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="label" type="xs:string"/>
        <xs:attribute name="user_interface" type="phyc:cmd_user_interface_enum" use="optional"/>
        <xs:attribute name="gui_order" type="xs:integer" use="required"/>
        <xs:attribute name="persistent" type="xs:boolean"/>
        <xs:attribute name="placement" type="xs:integer" use="optional"/>
    </xs:complexType>
    <xs:complexType name="cmd_param">
        <xs:annotation>
            <xs:documentation>A setting determined by the user (previously called cmd_option, but
                not always optional)</xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="phyc:base_cmd_param">
                <xs:sequence>
                    <xs:annotation>
                        <xs:documentation>Currently the *_type_info element indicates what type the
                            parameter represents and encapsulates the elements needed to provide
                            type-specific information. This has the advantage of making the xml
                            description of commands more modular (by lessening dependencies such as
                            "if the cmd_param/param_type attribute is set to boolean then the
                            cmd_param/default must be true or false.") The disadvantage is that the
                            type of the parameter is fundamental infromation that should be in an
                            attribute. TODO: we should discuss this structure. Perhaps an acceptable
                            solution is to have duplication of information: both the *_type_info
                            element and a param_type attribute and rely upon the xml author (or xml
                            authoring tool) to keep verify that the two settings are synchronized.</xs:documentation>
                    </xs:annotation>
                    <xs:choice>
                        <xs:element name="bool_type_info" type="phyc:bool_type_info"/>
                        <xs:element name="char_set_type_info" type="phyc:set_type_info"/>
                        <xs:element name="choice_type_info" type="phyc:choice_type_info"/>
                        <xs:element name="double_type_info" type="phyc:double_type_info"/>
                        <xs:element name="infile_type_info" type="phyc:string_type_info"/>
                        <xs:element name="integer_type_info" type="phyc:integer_type_info"/>
                        <xs:element name="name_type_info" type="phyc:restricted_string_type_info"/>
                        <xs:element name="outfile_type_info" type="phyc:outfile_type_info"/>
                        <xs:element name="output_type_info" type="phyc:output_type_info"/>
                        <xs:element name="restricted_string_type_info" type="phyc:restricted_string_type_info"/>
                        <xs:element name="string_type_info" type="phyc:string_type_info"/>
                        <xs:element name="tax_set_type_info" type="phyc:set_type_info"/>
                        <xs:element name="tree_set_type_info" type="phyc:set_type_info"/>
                        <!--xs:element name="unsigned_type_info" type="phyc:unsigned_type_info"/-->
                        <xs:element name="mixed_type_info" type="phyc:mixed_type_info"/>
                        <xs:element name="distribution_type_info" type="phyc:distribution_type_info"/>
                    </xs:choice>
                    <xs:element name="phycas_impl" type="phyc:man_var_parent" minOccurs="0"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="test_info">
        <xs:annotation>
            <xs:documentation>The evaluation of boolean test that is performed at run-time. These
                tests can be used to validate user-input or determine command or command parameter availability</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="message" type="phyc:test_message" minOccurs="0"/>
            <xs:choice>
                <xs:element name="callback" type="phyc:phycas_callback"/>
                <xs:element name="logicalOp" type="phyc:logical_test"/>
                <xs:element name="comparison" type="phyc:comparison_test"/>
                <xs:element name="predicate" type="phyc:value_as_bool"/>
            </xs:choice>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="set_type_info">
        <xs:annotation>
            <xs:documentation>Fields needed to specify a set (e.g. TaxSet, CharSet, TreeSet). TODO:
                much abstraction is needed here, currently we just have place holders for
                communicating with Phycas to get information about the maximum index, index labels,
                and currently defined sets</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="default" type="phyc:def_string_value_element"/>
            <xs:element name="phycas_impl">
                <xs:complexType>
                    <xs:all>
                        <xs:element name="manager_ptr" type="xs:string"/>
                    </xs:all>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="require_active" type="xs:boolean" default="false"/>
        <xs:attribute name="check_indices" type="xs:boolean" default="true"/>
    </xs:complexType>
    <xs:complexType name="choice_type_info">
        <xs:annotation>
            <xs:documentation>Holds default string and list of choices (the choices could be
                constant and known, or may be labile, meaning that the choice list must be updated
                using a callback mechanism</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="default" type="phyc:def_string_value_element"/>
            <xs:element name="choices" type="phyc:string_value_list"/>
            <xs:element name="phycas_impl">
                <xs:complexType>
                    <xs:all>
                        <xs:element name="manipulated_var" type="xs:string"/>
                    </xs:all>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="restricted_string_type_info">
        <xs:annotation>
            <xs:documentation>Holds default string and list of strings that are considered illegal
                (for instance a user cannot define a taxset with a name that clashes with a command parameter).</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="default" type="phyc:def_string_value_element"/>
            <xs:element name="disallowed_values" type="phyc:string_value_list"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="string_type_info">
        <xs:annotation>
            <xs:documentation>string type's default</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="default" type="phyc:def_string_value_element"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="distribution_type_info">
        <xs:annotation>
            <xs:documentation>Used to specify a statistical distribution (single or multi-variate). </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="default" type="phyc:def_string_value_element"/>
            <xs:element name="num_variates" type="xs:integer"/>
            <xs:element name="range_constraint" type="phyc:distrib_range"/>
            <xs:element name="phycas_impl" type="phyc:phycas_callback"/>
        </xs:sequence>
        <xs:attribute name="distrib_class" type="phyc:distrib_class"/>
    </xs:complexType>
    <xs:complexType name="outfile_type_info">
        <xs:annotation>
            <xs:documentation>Outfile's default name and prefix for the file $(prefix)Append and
                $(prefix)Replace boolean objects introduced (transparently into the NCL command)
                TODO: outfile (infile) needs to be generalize to an output element that is more
                flexible (supporting sockets, memory locations and files) and also specifies the
                form of the output (for example the NEXUS blocks written, or the XML schema that the
                output will conform to) - NOTE the output content would be part of a service
                description (a note to other developers) not a user-controlled setting</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="default" type="phyc:def_string_value_element"/>
            <xs:element name="prefix" type="xs:string"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="output_type_info">
        <xs:annotation>
            <xs:documentation/>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="default">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="redirect" type="phyc:output_redirection_enum"
                            minOccurs="0" maxOccurs="unbounded"/>
                        <xs:element name="file" minOccurs="0">
                            <xs:complexType>
                                <xs:attribute name="append" type="xs:boolean" default="false"/>
                                <xs:attribute name="replace" type="xs:boolean" default="false"/>
                                <xs:attribute name="path" type="xs:string"/>
                            </xs:complexType>
                        </xs:element>
                    </xs:sequence>
                    <xs:attribute name="suppress" type="xs:boolean" default="false"/>
                    <xs:attribute name="plottable" type="xs:boolean" default="false"/>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="bool_type_info">
        <xs:annotation>
            <xs:documentation>boolean type's default</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="default" type="phyc:def_bool_value_element"/>
        </xs:sequence>
        <!--xs:sequence>
            <xs:element name="default">
                <xs:complexType>
                    <xs:complexContent>
                        <xs:extension base="phyc:bool_value_element">
                            <xs:attributeGroup ref="phyc:def_cmd_param_attributes"/>
                        </xs:extension>
                    </xs:complexContent>
                </xs:complexType>
            </xs:element>
		</xs:sequence-->
    </xs:complexType>
    <xs:complexType name="integer_type_info">
        <xs:annotation>
            <xs:documentation>elements for storing default, min and max for integers</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="default" type="phyc:def_integer_value_element"/>
            <xs:element name="min_val" type="phyc:integer_value_element"/>
            <xs:element name="max_val" type="phyc:integer_value_element"/>
        </xs:sequence>
    </xs:complexType>
    <!--xs:complexType name="unsigned_type_info">
        <xs:sequence>
            <xs:element name="default" type="phyc:def_unsigned_value_element"/>
            <xs:element name="min_val" type="phyc:unsigned_value_element"/>
            <xs:element name="max_val" type="phyc:unsigned_value_element"/>
        </xs:sequence>
    </xs:complexType-->
    <xs:complexType name="double_type_info">
        <xs:annotation>
            <xs:documentation>elements for storing default, min and max for a real number (accepts
                scientific notation)</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="default" type="phyc:def_double_value_element"/>
            <xs:element name="min_val" type="phyc:double_value_element"/>
            <xs:element name="max_val" type="phyc:double_value_element"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="mixed_type_info">
        <xs:annotation>
            <xs:documentation>type-specific information for a mixed parameter, typically this is a
                parameter that can be specified by string that corresponds to one of a set of
                recognized choices or can be specified as a number (for example in paup LSET PINVAR
                = estimate; and LSET PINVAR = 0.2; are both legal).</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="default" type="phyc:def_integer_value_element">
                <xs:annotation>
                    <xs:documentation>0 or 1. This is the index of which of the next two
                        "sub-options" is the default.</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="cmd_param" type="phyc:cmd_param"/>
            <xs:element name="cmd_param" type="phyc:cmd_param"/>
            <!--xs:choice>
                <xs:element name="choice_type_info" type="phyc:choice_type_info"/>
                <xs:element name="double_type_info" type="phyc:double_type_info"/>
                <xs:element name="integer_type_info" type="phyc:integer_type_info"/>
                <xs:element name="unsigned_type_info" type="phyc:unsigned_type_info"/>
                <xs:element name="mixed_type_info" type="phyc:mixed_type_info"/>
            </xs:choice>
            <xs:choice>
                <xs:element name="choice_type_info" type="phyc:choice_type_info"/>
                <xs:element name="double_type_info" type="phyc:double_type_info"/>
                <xs:element name="integer_type_info" type="phyc:integer_type_info"/>
                <xs:element name="unsigned_type_info" type="phyc:unsigned_type_info"/>
                <xs:element name="mixed_type_info" type="phyc:mixed_type_info"/>
            </xs:choice-->
        </xs:sequence>
        <!-- VKJ 10/25/04 - only tested with choice_type_info and either string,double, or integer_type_info -->
    </xs:complexType>
    <xs:simpleType name="cmd_user_interface_enum">
        <xs:annotation>
            <xs:documentation>Commands may apply to batch mode, console, and/or gui user_interfaces </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="batch"/>
            <xs:enumeration value="console"/>
            <xs:enumeration value="gui"/>
            <xs:enumeration value="batch|console"/>
            <xs:enumeration value="batch|gui"/>
            <xs:enumeration value="console|gui"/>
            <xs:enumeration value="all"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="comp_target">
        <xs:annotation>
            <xs:documentation>Preprocessor directives used in translating the xml to C++ to compile
                a command (or set of commands) "ALL" indicates that the command is compiled in all versions</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="USING_COPYING_FOR_STAR_TREE"/>
            <xs:enumeration value="!USING_COPYING_FOR_STAR_TREE"/>
            <xs:enumeration value="WIN_PHOREST"/>
            <xs:enumeration value="ALL"/>
            <xs:enumeration value="SUPPORT_GETTREES"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="distrib_class">
        <xs:annotation>
            <xs:documentation>Enumeration of general classes of statistical distributions</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="Discrete"/>
            <xs:enumeration value="Continuous"/>
            <xs:enumeration value="Any"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="distrib_range_enum">
        <xs:annotation>
            <xs:documentation>Description the class of the legal range of a variate</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="NonNegative"/>
            <xs:enumeration value="ZeroToOne"/>
            <xs:enumeration value="SumToOne"/>
            <xs:enumeration value="Bounded"/>
            <xs:enumeration value="Unbounded"/>
            <xs:enumeration value="Any"/>
            <!-- any form of distribution is accepted -->
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="rest_gui_desc">
        <xs:annotation>
            <xs:documentation>Restricts length of gui description </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:maxLength value="40"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:complexType name="distrib_range">
        <xs:annotation>
            <xs:documentation>Describes the legal range of variate</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="min_val" type="phyc:integer_value_element" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>Used when constraint == Bounded to describe the minimum
                        acceptable value</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="max_val" type="phyc:integer_value_element" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>Used when constraint == Bounded to describe the maximum
                        acceptable value</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="constraint" type="phyc:distrib_range_enum" use="optional"/>
    </xs:complexType>
    <xs:group name="phycas_callback_group">
        <xs:annotation>
            <xs:documentation>Group of elements used needed to write the C++ code for calling a
                function to get a labile value to query the current state of phycas</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="receiver_class" type="xs:string" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>Class that the function is a method of</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="function" type="xs:string">
                <xs:annotation>
                    <xs:documentation>Name of the function to call</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="ptr_name_in_setup" type="xs:string" minOccurs="0">
                <xs:annotation>
                    <xs:documentation>name of pointer to the receiver instance in the the code</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
    </xs:group>
    <xs:complexType name="phycas_callback">
        <xs:group ref="phyc:phycas_callback_group"/>
    </xs:complexType>
    <xs:complexType name="named_callback">
        <xs:annotation>
            <xs:documentation>Information needed to write a C++ callback that has a unique label
                that could be used by an external controller to refer to the callback from</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="external_label" type="xs:string" minOccurs="0"/>
            <xs:element name="phycas_impl" type="phyc:phycas_callback"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="test_message">
        <xs:annotation>
            <xs:documentation>Messages to display to the user when a conditional evaluation fails</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="success" type="xs:string" minOccurs="0"/>
            <xs:element name="failure" type="xs:string" minOccurs="0"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="operand">
        <xs:annotation>
            <xs:documentation>value (constant, from a callback or from a command parameter) that can
                appear in a conditional evaluation</xs:documentation>
        </xs:annotation>
        <xs:choice>
            <xs:element name="label" type="xs:string">
                <xs:annotation>
                    <xs:documentation>name of a command param label whose value should be
                        substituted when performing the test (TODO: should be generalized to allow
                        parameters of different commands to be used)</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="labile" type="phyc:named_callback"/>
            <xs:element name="constant_val" type="xs:string"/>
        </xs:choice>
    </xs:complexType>
    <xs:complexType name="test_description">
        <xs:annotation>
            <xs:documentation>base class of predicate, comparison, and logical tests</xs:documentation>
        </xs:annotation>
        <xs:attribute name="name" type="xs:string" use="required"/>
    </xs:complexType>
    <xs:complexType name="value_as_bool">
        <xs:annotation>
            <xs:documentation>describes conditional evaluation performed by treating a value in the
                boolean context. Note: value_as_bool, </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="phyc:test_description">
                <xs:choice>
                    <xs:element name="label" type="xs:string"/>
                    <xs:element name="labile" type="phyc:named_callback"/>
                </xs:choice>
                <xs:attribute name="evaluate_to" use="required"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:simpleType name="logical_operator">
        <xs:annotation>
            <xs:documentation>enumeration of the types of logical operations that are supported for
                the left and right operands</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="and"/>
            <xs:enumeration value="xor"/>
            <xs:enumeration value="or"/>
            <xs:enumeration value="if_fir_sec">
                <xs:annotation>
                    <xs:documentation>shorthand for ((left and right) or (not left))</xs:documentation>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="not_and"/>
            <xs:enumeration value="not_xor"/>
            <xs:enumeration value="not_or"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="comparison_operator">
        <xs:annotation>
            <xs:documentation>Enumeration of operators for numeric comparison</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="greater_than"/>
            <xs:enumeration value="less_than"/>
            <xs:enumeration value="equals"/>
            <xs:enumeration value="not_equal"/>
            <xs:enumeration value="less_or_equal"/>
            <xs:enumeration value="greater_or_equal"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:complexType name="logical_test">
        <xs:complexContent>
            <xs:extension base="phyc:test_description">
                <xs:sequence>
                    <xs:element name="left_operand" type="phyc:operand"/>
                    <xs:element name="operator" type="phyc:logical_operator"/>
                    <xs:element name="right_operand" type="phyc:operand"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="comparison_test">
        <xs:complexContent>
            <xs:extension base="phyc:test_description">
                <xs:sequence>
                    <xs:element name="left_operand" type="phyc:operand"/>
                    <xs:element name="operator" type="phyc:comparison_operator"/>
                    <xs:element name="right_operand" type="phyc:operand"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="test_wrapper">
        <xs:sequence>
            <xs:element name="test_info" type="phyc:test_info"/>
        </xs:sequence>
        <xs:attribute name="implemented_at" type="xs:string">
            <xs:annotation>
                <xs:documentation>should be omitted or gui, c++, all inidicates the level at which
                    the the test is implemented (omitting the attribute is the same as specifying
                    "all" ie all interfaces should perform the test)</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>
    <xs:complexType name="phycas_command_impl">
        <xs:annotation>
            <xs:documentation>Info needed to writing the functions needed to create the NCL parser
                object for this command</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="setup" type="phyc:phycas_setup"/>
            <xs:element name="handler" type="phyc:phycas_callback"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="phycas_setup">
        <xs:sequence>
            <xs:group ref="phyc:phycas_callback_group"/>
            <xs:element name="setup_header" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="settings_header" type="xs:string" minOccurs="0"/>
            <!--xs:element name="settings_struct_owner" type="xs:string" minOccurs="0"/>
			<xs:element name="settings_struct_name" type="xs:string" minOccurs="0"/-->
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="string_value_element">
        <xs:choice>
            <xs:element name="labile" type="phyc:named_callback"/>
            <xs:element name="constant_val" minOccurs="0">
                <xs:simpleType>
                    <xs:restriction base="xs:string"/>
                </xs:simpleType>
            </xs:element>
        </xs:choice>
    </xs:complexType>
    <xs:complexType name="string_value_list">
        <xs:choice>
            <xs:element name="labile" type="phyc:named_callback"/>
            <xs:element name="constant_val" minOccurs="0" maxOccurs="unbounded">
                <xs:simpleType>
                    <xs:restriction base="xs:string"/>
                </xs:simpleType>
            </xs:element>
        </xs:choice>
    </xs:complexType>
    <xs:complexType name="bool_value_element">
        <xs:choice>
            <xs:element name="labile" type="phyc:named_callback"/>
            <xs:element name="constant_val" minOccurs="0">
                <xs:simpleType>
                    <xs:restriction base="xs:boolean"/>
                </xs:simpleType>
            </xs:element>
        </xs:choice>
    </xs:complexType>
    <xs:complexType name="integer_value_element">
        <xs:choice>
            <xs:element name="labile" type="phyc:named_callback"/>
            <xs:element name="constant_val" minOccurs="0">
                <xs:simpleType>
                    <xs:restriction base="xs:integer"/>
                </xs:simpleType>
            </xs:element>
            <xs:element name="label" type="xs:string"/>
        </xs:choice>
    </xs:complexType>
    <!--xs:complexType name="unsigned_value_element">
        <xs:choice>
            <xs:element name="labile" type="phyc:named_callback"/>
            <xs:element name="constant_val" minOccurs="0">
                <xs:simpleType>
                    <xs:restriction base="xs:nonNegativeInteger"/>
                </xs:simpleType>
            </xs:element>
            <xs:element name="label" type="xs:string"/>
        </xs:choice>
    </xs:complexType-->
    <xs:simpleType name="sci_double">
        <xs:annotation>
            <xs:documentation xml:lang="en"> A real (double-precision floating point) literal.
                Content is the value in "scientific" notation corresponding to the printf %1.5E
                format, or one of the special values INF, -INF, or NaN.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:pattern value="-?INF|UNDEF|NaN|-?DBL_MAX|-?DBL_MIN|-?\d*(\.\d+([eE](\+|\-)\d+)?)?"/>
            <!---->
        </xs:restriction>
    </xs:simpleType>
    <xs:complexType name="double_value_element">
        <xs:choice>
            <xs:element name="labile" type="phyc:named_callback"/>
            <xs:element name="constant_val" minOccurs="0">
                <xs:simpleType>
                    <xs:restriction base="phyc:sci_double"/>
                </xs:simpleType>
            </xs:element>
            <xs:element name="label" type="xs:string"/>
        </xs:choice>
    </xs:complexType>
    <xs:complexType name="man_var_parent">
        <xs:annotation>
            <xs:documentation>Speficies the name of the data member in the C++ code that is
                manipulated by NCL. guaranteed to cmd_param be unique within the context of a single
                command's parameters</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="manipulated_var" type="xs:string"/>
        </xs:sequence>
    </xs:complexType>
    <xs:attributeGroup name="def_cmd_param_attributes">
        <xs:annotation>
            <xs:documentation>Placeholder for attributes that are relevant to default values (for
                example a default might represent the "factory" default or a setting from a user's
                "init" file)</xs:documentation>
        </xs:annotation>
    </xs:attributeGroup>
    <xs:complexType name="def_bool_value_element">
        <xs:complexContent>
            <xs:extension base="phyc:bool_value_element">
                <xs:attributeGroup ref="phyc:def_cmd_param_attributes"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="def_string_value_element">
        <xs:complexContent>
            <xs:extension base="phyc:string_value_element">
                <xs:attributeGroup ref="phyc:def_cmd_param_attributes"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="def_integer_value_element">
        <xs:complexContent>
            <xs:extension base="phyc:integer_value_element">
                <xs:attributeGroup ref="phyc:def_cmd_param_attributes"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <!--xs:complexType name="def_unsigned_value_element">
        <xs:complexContent>
            <xs:extension base="phyc:unsigned_value_element">
                <xs:attributeGroup ref="phyc:def_cmd_param_attributes"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType-->
    <xs:complexType name="def_double_value_element">
        <xs:complexContent>
            <xs:extension base="phyc:double_value_element">
                <xs:attributeGroup ref="phyc:def_cmd_param_attributes"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:simpleType name="output_redirection_enum">
        <xs:annotation>
            <xs:documentation>enumeration of ncl-supported options for redirecting output of a command.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="Output"/>
            <xs:enumeration value="Plot"/>
            <xs:enumeration value="Error"/>
            <xs:enumeration value="Comment"/>
        </xs:restriction>
    </xs:simpleType>
</xs:schema>
