Installing Phycas and the PhyPy library
=======================================

MacOS
-----

TODO 

Windows
-------
Python 2.4 or 2.5 must be installed before trying to install Phycas.
If you have previously installed Phycas, uninstall your existing version
of Phycas before installing a new version. To do this, choose 

   Start > All Programs > Phycas > Uninstall Phycas

Download and run the correct installer for your version of Python:
  
  Phycas-1.0.win32-py2.4.exe if you have Python 2.4 installed
  Phycas-1.0.win32-py2.5.exe if you have Python 2.5 installed
  
After installing Phycas, choose Start > All Programs > Phycas > 
"Test Phycas Example Scripts" to run a series of short tests (only 
takes a couple of minutes). The results of the tests are saved in
the file runall_diffs.txt, which is stored in the Tests folder of
your Phycas installation folder, which can be opened using
Start > All Programs > Phycas > "Phycas Installation Folder"

You may also wish to test all the examples embedded in the online
documentation. To do this, choose Start > All Programs > Phycas > 
"Test Examples Within Phycas Documenation"

Linux
-----
Pardon the Mediawiki markup...

== Important Note ==

These instructions were written for Linux systems (only tested on Fedora Core 6), and may not work on a Mac system. We are working to correct this. The recent change in the Boost Build system starting in version 1.34.0 necessitated some major rearrangements in our build system, and we are slowly getting caught up. Thank you for your patience.

== Assumptions ==

=== Shell ===

This document assumes that you are using '''tcsh''' as your shell environment (to find out which, issue the command <tt>env</tt> and look for the value of the SHELL environmental variable). If your default shell is not tcsh, you can switch to using the tcsh command by typing <tt>tcsh</tt> at the command prompt.

For an introduction to working with a UNIX shell see http://www.ee.surrey.ac.uk/Teaching/Unix/

On a Mac, the most common application used to create shell sessions is <tt>Applications/Utilities/Terminal.app</tt>.

=== Boost version ===

Phycas requires the Boost Python library, and this document assumes you are using Boost version 1.34.0. 

{{important|Note: These instructions will not work for versions of Boost earlier than 1.34.0 because of a major change in the Boost build system between versions 1.33.1 and 1.34.0}}

== Obtaining Python ==

You can skip this section if your computer already has Python 2.3 (or later) installed. 

To determine your Python version, open a terminal window and type 

 python -V

If you do not have Python, or if you have an older version, you will need to obtain and install a recent version (preferably 2.5).

Python is freely available from http://www.python.org/

== Obtaining Boost and building bjam ==

Download the latest version of Boost from http://www.boost.org/. The rest of this document will assume you downloaded <tt>boost_1_34_0.tar.gz</tt>. Here's one way to download Boost from the command line using the direct link provided by SourceForge:

 <nowiki>curl http://easynews.dl.sourceforge.net/sourceforge/boost/boost_1_34_0.tar.gz > boost_1_34_0.tar.gz</nowiki>

=== Unpack Boost ===

Move the archive to your home directory (i.e. the directory to which the environmental variable $HOME refers) and unpack the boost library as follows:

 tar zxvf boost_1_34_0.tar.gz

=== Build the bjam executable ===

Now build the <tt>bjam</tt> executable, which will be used to compile both the <tt>boost_python</tt> dynamic link library as well as the dynamic link libraries composing the <tt>phycas</tt> package.

 cd $HOME/boost_1_34_0/tools/jam/src
 ./build.sh

This creates a directory named <tt>bin.&lt;platform-specifier&gt;</tt> within which the <tt>bjam</tt> executable may be found. Note that <tt>&lt;platform-specifier&gt;</tt> is a placeholder; i.e. you will actually see a directory named <tt>bin.linux</tt>, <tt>bin.linuxx86</tt>, or <tt>bin.macosxx86</tt>, depending on your platform.

=== Place bjam in your PATH ===

Find the <tt>bjam</tt> executable and make sure that it is listed your <tt>PATH</tt> environmental variable. You can do this by moving it to a directory that is already on your path. To find out what directories are already in your PATH, type <tt>env | grep PATH</tt> to get a listing of all environmental variables (the grep command filters the output so that only lines containing PATH are shown). Many people put executables in <tt>$HOME/bin</tt> and add that directory to their <tt>PATH</tt>. Alternatively, you can leave <tt>bjam</tt> where it is and put it on your PATH with a command such as the following:

 setenv PATH "${PATH}:$HOME/boost_1_34_0/tools/jam/src/bin.linuxx86"

=== Tell bjam where to find the Boost Build system ===

When it starts, bjam needs to know where your Boost build system files are located. One way to tell it is to create an environmental variable named BOOST_BUILD_PATH that points to it. Here is a command that sets this environmental variable:

 setenv BOOST_BUILD_PATH "$HOME/boost_1_34_0/tools/build/v2"

You should also define an environmental variable named BOOST_ROOT that points to the Boost main directory. This will be used by the <tt>Jamroot</tt> file that comes with the Phycas distribution.

 setenv BOOST_ROOT "$HOME/boost_1_34_0"

== Building Phycas ==

=== Download Phycas ===

Download Phycas to your home directory. Here's one way to do this using curl:

 curl <nowiki>http://www.eeb.uconn.edu/projects/phypy/downloads/Phycas-0.11.351.tar.gz > Phycas-0.11.351.tar.gz</nowiki>

=== Unpack Phycas ===

Unpack Phycas from within your home directory as follows:

 tar zxvf Phycas-0.11.351.tar.gz

Navigate to the Phycas folder, which contains the file <tt>Jamroot</tt>

 cd $HOME/Phycas-0.11.351

=== Edit the Jamroot file ===

At the top of the <tt>$HOME/Phycas-0.11.351/Jamroot</tt> file, you will see these statements:

 #alias tool_specific_requirements : : : : <toolset>gcc ... ;
 #alias tool_specific_requirements : : : : <toolset>darwin ... ;
 #alias tool_specific_requirements : : : : <toolset>msvc ... ;

(Note that the ellipsis (<tt>...</tt>) is not actually present in these lines.) Choose the line most appropriate for your platform (toolset <tt>gcc</tt> should be used for linux and toolset <tt>darwin</tt> should be used for Mac) and uncomment it by removing the initial hash (#) character.

{{important|Mac users: even though you have the gcc compiler on your Mac, use the line specifying toolset darwin}}

=== Build Phycas ===

Finally, you are ready to build the shared libaries used by Phycas:

 cd $HOME/Phycas-0.11.351
 bjam release --build-dir=temp

The last <tt>bjam</tt> option causes temporary build files to be placed in a particular directory (in this case <tt>temp</tt>). You can omit this option if you like. It doesn't really matter where the temporary build files end up unless you want to save some hard disk space by deleting them after the build is finished.

If for some reason you want to create a debug version (not recommended unless you are planning to modify Phycas' C++ components), just omit the <tt>release</tt> command line argument (<tt>debug</tt> is the default variant).

=== Tell Python how to find Phycas ===

Now you need to tell Python how to find the phycas package:

 setenv PYTHONPATH "$HOME/Phycas-0.11.351:$PYTHONPATH"

If you get an error message saying that <tt>PYTHONPATH</tt> doesn't exist, try this instead:

 setenv PYTHONPATH "$HOME/Phycas-0.11.351"

=== Tell the operating system how to find the Boost Python shared library ===

This step shouldn't be necessary, and as soon as we figure out how to avoid this we will take this step out of the instructions. For now, however, it appears to be necessary, at least for Linux.

To ensure that the operating system can locate the Boost Python shared library, issue the following command:

 setenv LD_LIBRARY_PATH "$HOME/Phycas-0.11.351/phycas/Conversions"

{{important|The information in this section is Linux specific. Mac-specific instructions will be added soon.}}

=== Test Phycas ===

Now you should be able to start Python and begin using the phycas module: for example, type <tt>python</tt> at the shell command prompt and try issuing some Python statements that test whether phycas is available:

  python
  >>> from phycas import *
  >>> d = ProbDist.ExponentialDist(10.0)
  >>> print d.sample()

You can escape from Python using the normal exit key combination Ctrl-D.

==== Run the test suite ====

After verifying that everything works, run the test suite to make sure all is well:

  cd $HOME/Phycas-0.11.0/phycas/Tests
  python runall.py

This should produce a lot of output. When it is finished, issue the following command to view the contents of the runall_diffs.txt:

 cat runall_diffs.txt

The contents of this file should look like this:

 ****************************
 *** Running ExplorePrior ***
 ****************************
  
 ***************************
 *** Running FixedParams ***
 ***************************
  
 ****************************
 *** Running GelfandGhosh ***
 ****************************
  
 ******************************
 *** Running LikelihoodTest ***
 ******************************
  
 **************************
 *** Running Polytomies ***
 **************************
  
 *************************
 *** Running Simulator ***
 *************************

==== Test the examples within the documentation ====

Now test the examples that are embedded in the help documentation:

  python doctestall.py

This should produce this output if successful:

  Finished testing examples

=== About the included use cases ===

If both of these tests pass, then you are ready to begin using Phycas for analyses. The next step might be to take a look in the $HOME/Phycas-0.11.0/phycas/Examples folder. This folder contains example Python scripts that show you how to perform published analyses on actual datasets. The python scripts are well documented on this web site: click [[Use cases]] in the navigation sidebar to find detailed explanations of these scripts.

== Making it easier to recompile Phycas ==

You created several environmental variables in the process of building Phycas. If you ever need or want to recompile Phycas, you can avoid having to enter these <tt>setenv</tt> commands each time by placing them in your <tt>$HOME/.tcshrc</tt> file, which gets executed every time you log in. Here are the lines you need to add to your <tt>$HOME/.tcshrc</tt>:

 setenv PATH "${PATH}:$HOME/boost_1_34_0/tools/jam/src/bin.linuxx86"
 setenv BOOST_ROOT "$HOME/boost_1_34_0"
 setenv BOOST_BUILD_PATH "$HOME/boost_1_34_0/tools/build/v2"
 setenv PYTHONPATH "$HOME/Phycas-0.11.351"
 setenv LD_LIBRARY_PATH "$HOME/Phycas-0.11.351/phycas/Conversions"

The new environmental variables will now be in place every time you login.
