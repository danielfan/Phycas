from phycas import model, partition, randomtree, P
from phycas.Utilities.PhycasCommand import *
from phycas.Phycas.IDRImpl import InflatedDensityRatio
import copy
class IDR(PhycasCommand):
    def __init__(self):
        args = tuple(PhycasCommand._getRNGOptions() + [
            ("params",              None,               "Name of file containing sampled parameter values. Should not be None when the idr command is called.", FileExistsValidate),
            ("trees",               TreeCollection(),   "A source of trees (list of trees or the name of the input tree file) to be summarized. This setting should not be None at the time the idr method is called.", TreeSourceValidate),
            ("data_source",         P.characters,       "The DataSource that provides the data, to be used in the IDR analysis. Should be a DataSource object", DataSourceValidate),
            ("burnin",              1,                  "Number of samples from the input files to skip", IntArgValidate(min=0)),
            ])
        o = PhycasCommandOutputOptions()
        o.__dict__["_help_order"] = ["log"]
        logf_spec = TextOutputSpec(prefix='sumtoutput', help_str="The file specified by this setting saves the console output generated by sumt(). If set to None, console output will not be saved to a file.")
        o.__dict__["log"] = logf_spec
        PhycasCommand.__init__(self, args, "idr", "The idr command is used to estimate the marginal likelihood given a sample of trees and parameters from an MCMC analysis. Note: the model in place when this command is called must be identical to the model used to generate the params and trees files.", o)

        # data members hidden from users
        self.__dict__["partition"]                      = partition
        self.__dict__["use_unimap"]                     = False
        self.__dict__["uf_num_edges"]                   = 50
        self.__dict__["fix_topology"]                   = False
        self.__dict__["slice_max_units"]                = 1000
        self.__dict__["slice_weight"]                   = 1
        self.__dict__["doing_steppingstone_sampling"]   = False
        self.__dict__["state_freq_weight"]              = 1
        self.__dict__["state_freq_psi"]                 = 300.0
        self.__dict__["state_freq_psi0"]                = 1.0
        self.__dict__["rel_rate_weight"]                = 1
        self.__dict__["rel_rate_psi"]                   = 300.0
        self.__dict__["rel_rate_psi0"]                  = 1.0
        self.__dict__["tree_scaler_weight"]             = 0.0
        self.__dict__["ls_move_weight"]                 = 100
        self.__dict__["ls_move_lambda"]                 = 0.2
        self.__dict__["ls_move_lambda0"]                = 1.0
        self.__dict__["allow_polytomies"]               = False
        self.__dict__["ss_heating_likelihood"]          = False
        

    def hidden():
        """ 
        Overrides the PhycasCommand.hidden method to keep IDR's name from being displayed 
        in the list of classes displayed when users type help. Delete this function, or
        change its return value to False, when it is ready to be advertised.
        """
        return True
        
    hidden = staticmethod(hidden)

    def __call__(self, **kwargs):
        self.set(**kwargs)
        c = copy.deepcopy(self)
        inflated_density_ratio = InflatedDensityRatio(c)
        inflated_density_ratio.marginal_likelihood()
        
