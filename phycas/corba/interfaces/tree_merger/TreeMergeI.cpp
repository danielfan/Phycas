// -*- C++ -*-
//
// $Id: TreeMergeI.cpp,v 1.4 2005/05/19 17:02:11 mholder Exp $

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from 
// be/be_codegen.cpp:1030
#include "phycas/modules/scm/scm.hpp"

//#include "/Users/mholder/Documents/projects/Phycas/phycasdev/phycas/corba/interfaces/tree_merger/TreeMergeI.h"
#include "TreeMergeI.h"

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_is.cpp:52

// Implementation skeleton constructor
CipresIDL_TreeMerge_i::CipresIDL_TreeMerge_i (void)
{
}

// Implementation skeleton destructor
CipresIDL_TreeMerge_i::~CipresIDL_TreeMerge_i (void)
{
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_is.cpp:57
//template<typename CORBA_SEQ, typename INSERTER>
//void InsertFromCORBASeq(const CORBA_SEQ & corbaSeq, INSERTER &ins)

::CipresIDL::Tree * CipresIDL_TreeMerge_i::mergeTrees (
    const CipresIDL::TreeSeq & trees
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
	{
	typedef std::set<CORBA::Long> SetCorbaLong;
	SetCorbaLong indices;
	VecString strVec;
	const UInt nTrees = trees.length();
	strVec.reserve(nTrees);
	for (UInt i = 0; i < nTrees; ++i)
		{
		const CipresIDL::Tree & treeI = trees[i];
		strVec.push_back(std::string(treeI.m_newick.in())); //shouldn't need to copy strings here
		const UInt nLeaves =  treeI.m_leafSet.length();
		for (UInt j = 0; j < nLeaves; ++j)
			indices.insert(treeI.m_leafSet[j]);
		}
	
	const std::string & s = NewickSCM(strVec);
	
	CipresIDL::Tree_var t = new CipresIDL::Tree;
	t->m_newick = CORBA::string_dup(s.c_str());
	t->m_name = CORBA::string_dup("MergedTree");
	t->m_score.noScore(0.0);
	t->m_leafSet.length(indices.size());
	SetCorbaLong::const_iterator indIt = indices.begin();
	for (UInt k = 0; indIt != indices.end(); ++k, ++indIt)
		t->m_leafSet[k] = *indIt;
	return t._retn();
	}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_is.cpp:57

char * CipresIDL_TreeMerge_i::getUIXml (
    
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return CORBA::string_dup("");
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_is.cpp:57

CORBA::Boolean CipresIDL_TreeMerge_i::execute (
    const char * command,
    CORBA::String_out display
  )
  ACE_THROW_SPEC ((
    CORBA::SystemException
  ))
{
  return CORBA::Boolean(true);
}

