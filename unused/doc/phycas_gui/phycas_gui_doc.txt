/**
 *	\file phycas_gui_doc.txt 
 *	\mainpage PhycasGUI
 *	\section phycas_gui_doc PhycasGUI
 *	PhycasGUI is a GUI front-end written in Java.
 *	It translates the user's actions into NEXUS commands that are sent to phycas_server, and then formats the xml output of phycas_server for display to the user.
 *
 *	\subsection phycas_gui_intro Introduction
 *	phycasGUI.PhycasMainThread is the main class that runs when the PhycasGUI is started.
 *	This class spawns two threads phycasGUI.network.PhycasSocket for socket communication and phycasGUI.swixml.PhycasMain which controls the creation of the GUI and interactions with the user.
 *	PhycasSocket maintains the socket connection to phycas_server and handles XML messages sent from phycas_server - the logic for parsing phycas_server's output is in phycasGUI.network.PhycasSocket.assignChildren().
 *	PhycasMain creates the windows of the GUI and maintains references to them and each of their components.
 *	Most of the GUI components are created using Swixml, a protocol which allows representation of Java Swing components in XML.
 *	These Swixml XML files are auto-generated using the XSLT scripts <tt>gui/phycasGUI/swixml/translate/mainXMLTransform.xsl</tt> 
 *	and <tt>gui/phycasGUI/swixml/translate/commandsXMLTransform.xsl</tt> at any point during the build process (before or after compilation of the Java).
 *	The Swixml XML files are rendered upon starting the PhycasMain thread (see \ref phycas_gui_components).
 *	<tt>gui/phycasGUI/swixml/PhycasMain.java</tt> must be auto-generated using the XSLT script <tt>gui/phycasGUI/swixml/translate/mainJavaTransform.xsl</tt> before the gui can be compiled.
 *	
 *	\subsection phycas_gui_handlers Handler Classes
 *	phycasGUI.swixml.PhycasMain also contains references to instance of the command Handler classes.
 *	Each command in phycas_server has menu item in the GUI. Selecting this menu item displays a panel of GUI elements associated with the command.
 *	Each command also has a class named \$(CommandLabel)Handler in the package phycasGUI.swixml.handler to control the GUI panel for the command.
 *	An instance of an Handler class handles all events generated by the user's interaction with the GUI for its command, including:
 *		-	Validation of the data submitted, 
 *		- 	Creation of the Nexus command string, and
 *		- 	Getting data from the from the \ref phycas_gui_xmlbeans and setting the appropriate data members in the GUI.
 *	The Handler classes are auto-generated using the Python script <tt>gui/phycasGUI/swixml/translate/commandsJavaTransform.py</tt> 
 *	(which relies on the script <tt>gui/phycasGUI/swixml/translate/cmdParamJavaTransform.py</tt>).
 *
 *	\subsection phycas_gui_xmlbeans XMLBeans
 *	XMLBeans are Java objects that correspond to XML schemas.
 *	PhycasGUI uses a set of XMLBeans classes (package org.phycas.commandLanguage) created from <tt>command_archive/xml/phycas_command_language.xsd</tt> to store the data from the initial command language description.
 *	Instances of these commandLanguage XMLBeans are created in phycasGUI.swixml.PhycasMain.run() by parsing the command language XML file found at <tt>gui/xml/all_commands.xml</tt>. 
 *	A different set of XMLBeans classes (package org.phycas.commandState) are created from <tt>command_archive/xml/command_state.xsd</tt> to interpret phycas_server's current command state.
 *	PhycasGUI sends an <tt>Available</tt> command to the phycas_server whenever it needs to refresh the state to display to the user (typically this will occur after every command).
 *	phycas_server responds through the <tt>hidden_query</tt> output channel with a command state message that conforms to <tt>command_archive/xml/command_state.xsd</tt>.
 *	phycasGUI.network.PhycasSocket.assignChildren() uses phycasGUI.swixml.PhycasCommandState to parse the message and instantiate a set of org.phycas.commandState objects
 *	PhycasCommandState then moves the data from the command state beans to the command language beans using reflection (see Figure),
 *	because the commandLanguage and commandState schemas are quite different, some complicated translation between data types must occur.
 *	\image html state_to_lang_beans.gif "PhycasCommandState class translates command state XMLBeans information to command language XMLBeans" 
 *	The script \c scomp (from Apache Ant) generates jar file of the XMLBeans classes for each schema.
 *	\c scomp must be run prior to compilation whenever a change is made to a schema.
 *
 * \subsection phycas_gui_design Design
 *	The GUI consists of two windows the main window and the output window.
 *	\subsubsection phycas_gui_mainwindow Main Window
 *	When the GUI is initially launched, the welcome screen is displayed in the main window panel.
 *	This screen allows the user to enter a command just as they would via the command-line interface to phycas_server.
 *	Each command from the command language description has a menu item in a menu on the menu bar of the main window.
 *	When a menu item is selected, the main window panel displays the appropriate command's panel.
 *	Whenever the user alters a GUI element (selects an item or changes focus out of a text edit box ??), the command handler (see \ref phycas_gui_handlers) validates the information that the user has entered.
 *	When a command panel's OK button button is clicked, a NEXUS command string is generated and sent to phycas_server via the socket connection.
 *	The main window panel then switches back to the welcome screen.
 *	If an error occurs in phycas_server or more information is needed from the user, the main window panel will switch back to the last command panel viewed.
 *	Additional menu items in the menu bar allow the user to show the output window or the welcome screen, or to exit PhycasGUI (phycas_server will continue to run).
 *	
 *	\subsubsection phycas_gui_output Output Window 
 *	The output window contains a tabbed pane which initially contains a single tab, "Output".
 *	The panel on this tab contains a text area in which all output from phycas_server is written.
 *	If a command is issued by the user containing plottable data, tabs will be added to this window to allow the user to generate trace plots of the data returned by phycas_server.
 *	These graphs are created by phycasGUI.swixml.PhycasChart which uses the third-party package JFreeChart.
 *	The output window can be closed without exiting Phycas.
 *	The menu bar of this window contains options for saving and clearing the output text, and for printing, saving, closing, and editing the properties of graphs.
 *	Most of these actions can also be performed using a popup menu, which is made visible by right-clicking the mouse in either the output text area or on a graph.
 *	phycasGUI.swixml.PhycasOutput handles all events generated by a users interaction with the output window.
 *	
 *	\subsubsection phycas_gui_components Components
 *	Each of the commands contains one or more options that each has a type.
 *	The type of the option dictates what GUI components are created for that command option.
 *	The types and their corresponding GUI components are (a GUI label is also created for each type):
 *	<table><tr><td><b>Command Option Type</b></td><td><b>GUI Component</b></td></tr>
 *	 <tr><td>Boolean</td><td>check box</td></tr>
 *	 <tr><td>Character Set</td><td>scrollable list (contains member labels or indeces), combo box (contains set names), text field (to enter values instead of selecting)</td></tr>
 *	 <tr><td>Choice</td><td>radio buttons (if less than 4 choices and not variable) or combo box (if variable number of choices or greater than 4)</td></tr>
 *	 <tr><td>Distribution</td><td>text field, choose button (displays phycasGUI.swixml.PhycasDistributionChooser dialog box)</td></tr>
 *	 <tr><td>Double</td><td>text field</td></tr>
 *	 <tr><td>Input File</td><td>text field, choose button (displays file chooser)</td></tr>
 *	 <tr><td>Integer</td><td>text field</td></tr>
 *	 <tr><td>Mixed (combination of two option types)</td><td>Based on sub-options</td></tr>
 *	 <tr><td>Name (specialized Restricted String)</td><td>text field</td></tr>
 *	 <tr><td>Output</td><td>text field, checkboxes for File and Output and Plot (if plottable), choose button (displays file chooser), radio buttons for Append to or Replace file</td></tr>
 *	 <tr><td>Restricted String</td><td>text field</td></tr>
 *	 <tr><td>String</td><td>text field</td></tr>
 *	 <tr><td>Tax Set</td><td>scrollable list (contains member labels or indeces), combo box (contains set names), text field (to enter values instead of selecting)</td></tr>
 *	 <tr><td>Tree Set</td><td>scrollable list (contains member labels or indeces), combo box (contains set names), text field (to enter values instead of selecting)</td></tr>
 *	</table>
 *	
 *	\subsubsection phycas_gui_help JavaHelp System
 *	JavaHelp provides a mechanism for incorporating a general and context-sensitive help into an application.
 *	When a user selects the <em>Launch Help</em> menu item in the <b>Help</b> menu brings up the Help window initially showing the introduction page.
 *	The <em>Get help on specific item</em> menu item allows for context-sensitive help.
 *	When a user selects this item from the <b>Help</b> menu, the cursor will turn into an arrow with a question mark.
 *	The user can then click on a field in the GUI and the help window will be displayed with the help information for that field.
 *	This system is made possible by code in phycasGUI.swixml.PhycasMain.run() which sets ids for each of the GUI components.
 *	These target ids must be found in the Map file.
 
 *	All of the files necessary for the help system can be found in the <tt>gui/help</tt> directory.
 *	The <tt>Master.hs</tt> file is the Helpset file which designates which of the following components will be included:
 *	table of contents, index, search, glossary and favorites.
 *	<em> Note: Currently, only the first three are implemented.</em>
 *	The intro.html file contains introductory information on the software and GUI and is hard-coded.
 *
 *	The master directory contains the html files associated with the Master.hs Helpset.
 *	All of these are auto-generated from <tt>gui/xml/all_commands.xml</tt> using XSLT scripts which are found in the directory <tt>gui/help/translate</tt>
 *	(these scripts are automatically invoked by the <tt>transform_cmd_xml.py</tt> script that is used in the normal build phase).
 *	<table><tr><td><b>Script</b></td><td><b>Product</b></td></tr>
 *	<tr><td><tt>mapXMLTransform.xsl</tt></td><td><tt>help/Master.jhm</tt> - the Map file which maps ids to html files. This allows for the html files to change names while the application code refers to the same map id.</td></tr>
 *	<tr><td><tt>tocXMLTransform.xsl</tt></td><td><tt>help/MasterTOC.xml</tt> - the table of contents file which creates the items in the table of contents and sets each of their target ids.</td></tr>
 *	<tr><td><tt>indexXMLTransform.xsl</tt></td><td><tt>help/MasterIndex.xml</tt> - the index file which creates the items in the index and sets each of their target ids</td></tr>
 *	<tr><td><tt>commandsHTMLTransform.xsl</tt></td><td><tt>help/master/commands.html</tt> - contains all the help information for all of the commands</td></tr></table>
 *	
 *	In order for the search feature to work, a search database must first be created using the command jhindexer.
 *	This command takes in the directory containing all of the html files as an argument.
 *	Therefore, in order to create the search database, type the command <tt>jhindexer master</tt>.
 *	A folder called <tt>JavaHelpSearch</tt> will then be created which contains the search database files.
 *	For more information on the JavaHelp system, see the <a href="../jhug.pdf">JavaHelp User's Guide</a>. 
 */
