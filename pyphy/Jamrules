# Copyright David Abrahams 2003. See accompanying LICENSE for terms
# and conditions of use.

# If you move this example from its place in the Boost tree, edit this
# path to point at the root directory of your Boost installation (the
# one containing a subdirectory called "boost/" and a sub-subdirectory
# "boost/python/" full of .hpp files).  Absolute paths work, too.
#
path-global BOOST_ROOT : $(BOOST_ROOT) ;

# Boost.Python configuration variables, as described in
# http://www.boost.org/libs/python/doc/building.html#configuration.
# Usually you don't need to set these; the defaults will work.  If you
# do set them, try to change as few of them as possible, starting with
# the first ones.

  # PYTHON_VERSION = <the two-part Major.Minor version number, e.g. 2.2> ;
  # PYTHON_ROOT = <root directory of your Python installation, e.g. /usr> ;
  # PYTHON_INCLUDES = <path to Python #include directories> ;
  # PYTHON_LIB_PATH = <path to Python library object> ;

# You may need to configure your compiler toolset, especially if you
# want to build with a compiler that is not the "system default" or if
# it is installed in a nonstandard place; see
# http://www.boost.org/more/getting_started.html#Configuring for
# details.  

# Makes a project id for boost so that other Boost.Build projects can
# refer to it by name.
#
project boost : $(BOOST_ROOT) ;
project pyphy : $(PYPHY_ROOT) ;
#project cipres : $(CIPRES_LIB_ROOT)/C++ ;

# Change this setting to have all your built products placed under a
# single directory:
#
# ALL_LOCATE_TARGET = . ;

##### Variant definitions from http://www.boost.org/tools/build/v1/features.jam####
variant common :
    <include>$(CIPRES_LIB_ROOT)/C++
    <include>$(PHYCAS_ROOT)
    <include>$(BOOST_ROOT)
    <include>$(PHYCAS_ROOT)/pyphy/src
    <darwin><include>$(HOME)/site-packages
    <vtable-thunks>default
    <struct-alignment>auto
    <eh-model>default
    <threading>single
    <unicode-application>off
    <exception-handling>on
    <rtti>on
    <shared-linkable>false
    <address-model>default
    <architecture>native
    <instruction-set>default
    <profiling>off
    <object-model>default
    <darwin><*><cxxflags>"-include pyphy/src/pol_pyphy_config.h"
    <gcc><*><cxxflags>"-include pyphy/src/pol_pyphy_config.h"
    <vc-7_1><*><cxxflags>"-FI pyphy\\src\\pol_pyphy_config.h"
    # <vc-7_1><*><cxxflags>"-showIncludes"
    <darwin><*><cxxflags>-Wmost
    <darwin><*><cxxflags>-Wno-four-char-constants
    <darwin><*><cxxflags>-Wno-unknown-pragmas
    <darwin><*><cxxflags>-Wno-long-double
    <darwin><*><linkflags>"-undefined dynamic_lookup"
    <darwin><*><linkflags>"-twolevel_namespace"
    <darwin><*><linkflags>"-multiply_defined suppress"
    ;

variant debug : common :
    <debug-symbols>on
    <runtime-build>debug
    <optimization>off
    <inlining>off
    ;

if $(NT)    
{
    variant debug-python : debug :
      <define>BOOST_DEBUG_PYTHON
      <gcc><define>Py_DEBUG
      ;
}
else
{
    variant debug-python : debug :
      <define>BOOST_DEBUG_PYTHON
      <define>Py_DEBUG
      ;
}

variant release : common :
    <debug-symbols>off
    <runtime-build>release
    <optimization>speed
    <inlining>full
    <define>NDEBUG
    ;

# Profiling variant by Toon Knapen <toon@si-lab.com>
variant profile : release :
    <profiling>on
    <debug-symbols>on
    ;

