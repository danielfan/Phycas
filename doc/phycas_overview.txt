////////////////////////////////////////////////////////////////////////////////
///	\file phycas_overview.txt 
//////////

////////////////////////////////////////////////////////////////////////////////
///	\mainpage phycas
///
///	\section Overview
///	
///	The Phycas consists of two components: "PhycasGUI", a GUI front-end 
///	written in Java; and "phycas_server", a back-end processor written in C++.  The PhycasGUI translates 
/// the user's actions into NEXUS commands that are sent to phycas_server.
///	Then the PhycasGUI formats the phycas_server's xml output for display to the user. 
///	The PhycasExecutor is an additional program used to launch both PhycasGUI and phycas_server
///	and coordinate their actions.
///
///	Development of the PhycasGUI and phycas_server components are kept synchronized by maintaing
///	a description of the commands understood by phycas.  Currently this xml resides at
///	<tt>$PHYCAS_ROOT/gui/xml/all_commands.xml</tt> and conforms to the XML schema at 
/// <tt>$PHYCAS_ROOT/command_archive/xml/phycas_command_language.xsd</tt>.
///	The <tt>all_commands.xml</tt> file is transformed (by xslt and python code) into C++ code which is
///	used by phycas_server's command parser (a variant of the Nexus Class Library).  The same 
///	xml file is processed into Java code found in the PhycasGUI and xml files that conform to swixml's 
///	schema (swixml is used to render these xml files into PhycasGUI objects at launch time).  
///	\image html code_gen.png "phycas Command Language XML Transformations"
///	Both phycas_server and the PhycasGUI contain a substantial amount of is hand-coded logic 
///	which links to the autogenerated code.  Very little of the PhycasGUI code is phycas-specific, thus the 
///	PhycasGUI could serve as the front-end for a different computational kernel if used with a different 
///	command xml file. See <A HREF="./index.html#CMD_LANG_TODO">todo</A>.
///
///	phycas_server and the PhycasGUI communicate via sockets, thus the processes can be run on different machines.
///	PhycasExecutor allows the user to choose whether to launch phycas_server on the local machine
///	or to connect to an instance already running on a remote machine.  
///	If the local machine is chosen, the user can enter a specific port number or allow the PhycasExecutorto find an open port.
///	If a remote machine is chosen, the user supply the IP and port number.
///	After the user has chosen how where phycas_server will be run, PhycasExecutor launches the GUI and (if necessary) phycas_server
///	using command line arguments to transmit the user's preferences to phycas_server and PhycasGUI.
///	phycas_server takes a port number to server as a command-line argument.  It will then bind to the specified
///	port and begin listening for connections.
///	PhycasGUI takes the IP and port number as command-line arguments. 
///	See <A HREF="./index.html#REMOTE_SERVER">todo</A> and <A HREF="./index.html#REMOTE_FS">bug</A>
///	
/// \section comm_language Communication Language
///	After PhycasGUI creates a socket connection to phycas_server PhycasGUI sends commands in Nexus format.
///	phycas_server responds with XML.  
/// \image html brief_comm.png "phycas_server/PhycasGUI Communication"
///		-	\b out:
///			-	Contains output from the processing of the command.
///			-	PhycasGUI displays in Output text tab of Output Window.
///		-	\b comment:
///			-	Contains NEXUS output comments
///			-	PhycasGUI displays along with data from \b out tag.
///		-	\b error:
///			-	Contains messages associated with early termination of a command
///			-	PhycasGUI displays a dialog box with error message and an OK button
///		-	\b warning: 
///			-	Contains any warning messages that may have been generated (command execution will not be stopped)
///			-	PhycasGUI displays a dialog box with warning message and an OK button.
///		-	\b user_query:
///			-	Prompts user for more input or verification of dangerous actions.  
///			-	Processing of user_query tags is handled by phycasGUI.swixml.PhycasUserQuery.
///			.
///			\b user_query items have a type attribute that indicates what type of query is required.
///			The type attribute can have the following values:
///			-	\b file:
///				-	phycas_server was unable to open an input file or write to the specified output location. 
///				-	A \b message element will contain a sentence explaining which file was the culprit.
///				-	PhycasGUI displays a dialog box with the message and an OK button so the user can return to the command panel and select a different file.
///			-	\b string:
///				-	Contains a message that needs a variable response from the user.
///				-	PhycasGUI displays a dialog box with the message, an entry field for the user to type an answer, and an OK button to submit the response.
///			-	\b alert. \b Deprecated: messages should use the \b warning tag.
///				-	Contains a message to the user that needs no response.
///				-	PhycasGUI displays a dialog box with the message and an OK button.
///			-	\b choices:
///				-	Contains a message and a list of possible responses.
///				-	PhycasGUI displays a dialog box with the message, a drop down to choose a response, and an OK button to submit the response.
///			-	\b cancel_ok:
///				-	Contains a message that needs either ok or cancel as a response.
///				-	PhycasGUI displays a dialog box with the message and OK and Cancel buttons.
///			-	\b no_yes:
///				-	Contains a message that needs either yes or no as a response.
///				-	PhycasGUI displays a dialog box with the message and Yes and No buttons.
///		-	\b idle:  Empty tag signifying that phycas_server is now idle.
///		-	\b plot: Contains data to plot.
///			Processing of tags handled by phycasGUI.swixml.PhycasChart
///			-	\b label:
///				-	tab-separated string of data labels.
///				-	PhycasGUI will display these lables with checkboxes in a plot selector panel, allowing the user to select which columns to plot.
///			-	\b entry:
///				-	tab-separated string of numbers including a single data entry including a value for each label.
///				-	PhycasGUI will treat each entry as row of data to be plotted.
///		-	\b hidden_query
///			- Response to "available" command, which is sent by the GUI on startup and after each command.
///			- \b command_state
///				Contains information on the current state of the program, including which commands and options are available and their current values.
///				It has a schema similar to the command language but more concise, with additional tags for handling Tax Sets, Tree Sets, and Character Sets.
///				Each of these set types has a set manager of type phycasGUI.swixml.PhycasSetManager, which contains a group of sets of type phycasGUI.swixml.PhycasSet.
///				PhycasMain maintains a reference to each of the set managers.
///				When a command state message is received, PhycasCommandState updates each of the set managers to reflect the currently available sets and their members
///
///	\see <A HREF="../phycas_gui/html/index.html">PhycasGUI</A>
///	\see <A HREF="../phycas_server/html/index.html">phycas_server</A>
///	\see <A HREF="../executor/html/index.html">PhycasExecutor</A>
///	\todo <A NAME="CMD_LANG_TODO"><B>Specialize command language xml files</B></A>: ultimately the master command file should reside in \c $PHYCAS_ROOT/command_archive/xml
///		this file could be processed into \c $PHYCAS_ROOT/gui/xml/commands.xml and \c $PHYCAS_ROOT/phycas/xml/commands.xml
///		each of which would conform to schema that are proper subsets of the full phycas_command_language.xsd
///		this would clarify which elements are used by only the gui or only the ncl parser.
///
///	\todo <A NAME="REMOTE_SERVER"><B>Connecting to a remote server</B></A>. PhycasExecutor currently cannot launch or kill remote instances of phycas_socket
///
///	\bug <A NAME="REMOTE_FS"><B>Won't display remote filesystem</B></A>. PhycasGUI will display the local file system to the user even if the phycas_socket is running remotely.  Thus
///		all file paths must be entered as text fields (not using the file system browser).  Need to pipe files to the 
///		phycas_server or display the remote filesystem.
///	
//////////
