#! /usr/bin/python2.2
from sax_constructible import SAXConstructible, ChildrenToHandle, TextOnlyElement
import sys, cStringIO, re, os
from os import path
from cmdParamJavaTransform import *
from phycas_sax_util import *

class CmdPhycasImpl(SAXConstructible): pass
class CmdParamGroup(SAXConstructible): pass

class Command(SAXConstructible):
	def getCommandName(self):
		return self.label

	def getHandlerDir(self):
		global outputParentPath
		return outputParentPath + '/handler/'

	def writeOutput(self):
		out = cStringIO.StringIO()
		filename = self.getHandlerDir()+self.getCommandName()+'Handler.java'
		out = open(filename, 'w')
		self.writeIntro(out)
		self.writeDisallowedValues(out)
		self.writeGetSetParams(out)
		self.writeAvailableFields(out)
		self.writeActionValidation(out)
		self.writeActionCmdString(out)			
		self.writeActionWrapUp(out)
		self.writeGetErrMsgs(out)
		self.writeItemStateChanged(out)
		self.writeClosing(out)
		out.flush()

	def endSelfElement(self, name):
		for cmdParamGroup in self.cmd_param_group:
			for cmdParam in cmdParamGroup.cmd_param:
				cmdParam.setCommandParent(self)
		
	def writeDisallowedValues(self, out):
		for cmdParamGroup in self.cmd_param_group:
			for cmdParam in cmdParamGroup.cmd_param:
				cmdParam.writeDisallowedValues(out)

	def writeIntro(self, out):
		filename = self.getCommandName()+'Handler.java'
		classname = self.getCommandName()+'Handler'
		commandname = self.getCommandName()
		intro1 = '/*\n* '  
		intro2 = '''* This file is automatically generated.  Do not modify.
*/

package phycasGUI.swixml.handler;

import phycasGUI.swixml.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.StringTokenizer;
import java.io.File;
import org.phycas.commandLanguage.*;

/**
 * Handler for the specified command
 * @author Vanessa Jackson
 */

public class '''
		intro3 = r''' extends AbstractAction implements FocusListener, ItemListener, ComponentListener {
    
	private PhycasMain main;
    
	private boolean success = true;
	private boolean replace = false;
	private boolean append = false;
	private StringBuffer errors = null;
        private CmdParam[] allParams = null;'''
		intro4 = '''
	/**
         * Constructor
         * @param m main gui object
         */        
	public '''
		intro5 = '''(PhycasMain m) {
		main = m;
		errors = new StringBuffer();
	}

 '''
		out.write('%s%s\n%s%s%s\n\n' % (intro1, filename, intro2, classname, intro3))
		out.write('\tprivate String commandName = "%s";\n' % commandname)
		for cmdParamGroup in self.cmd_param_group:
			for cmdParam in cmdParamGroup.cmd_param:
				cmdParam.writeIntro(out)
		out.write('\n%s%s%s\n' % (intro4, classname, intro5))
		
	def writeGetSetParams(self, out):
		text = '''
        /**
         * Set the array of command parameters from the command language XMLBean
         * @param p command parameters
         */        
        public void setAllParams(CmdParam[] p) {
            allParams = p;
        }
        
        /**
         * Get the command parameter XMLBean array
         * @return command parameters
         */        
        public CmdParam[] getAllParams() {
            return allParams;
        }
        
        /**
         * Set the values from the gui fields into the command parameter XMLBean array
         */        
        public void setParams() {
            for(int i=0;i<allParams.length;i++) {
                System.out.println("Setting param: "+allParams[i].getLabel());'''
                
		text2 = '''
	    }
        }
        
        /**
         * Get the values from command parameter XMLBean array into the the gui fields
         */        
        public void getParams() {
            for(int i=0;i<allParams.length;i++) {
                System.out.println("Getting param: "+allParams[i].getLabel());'''

                text3 = '''
            }
        }'''

		out.write('%s\n' % text)
		for cmdParamGroup in self.cmd_param_group:
			for cmdParam in cmdParamGroup.cmd_param:
				cmdParam.writeSetParams(out)
		out.write('%s\n' % text2)
		for cmdParamGroup in self.cmd_param_group:
			for cmdParam in cmdParamGroup.cmd_param:
				cmdParam.writeGetParams(out)
		out.write('%s\n' % text3)

	def writeClosing(self, out): 
		closing = r'''
		
    private boolean validateLong(String s, long min, long max) {
        long l = -1;
        try {
            l = new Long(s).longValue();
            if(l<min || l>max)
		    return false;
        }
        catch (NumberFormatException e) {
            return false;
        }
        return true;
    }

    private boolean validateLong(String s, long min, String minP, String minTFVal, long max, String maxP, String maxTFVal) {
        long l = -1;
        if (minP!=null) {
            for(int i=0;i<allParams.length;i++) {
                if(allParams[i].getLabel().equals(minP)) {
                    min = new Integer(minTFVal).intValue();
                }
            }
        }
        if (maxP!=null) {
            for(int i=0;i<allParams.length;i++) {
                if(allParams[i].getLabel().equals(maxP)) {
                    max = new Integer(maxTFVal).intValue();
                }
            }
        }
        try {
            l = new Long(s).longValue();
            if(l<min || l>max)
		    return false;
        }
        catch (NumberFormatException e) {
            return false;
        }
        return true;
    }


    private boolean validateString(String s) {
	if(s.length() == 0)
		return false;
	else
	        return true;
    }

    private boolean validateString(String s, String[] disallowed) {
	if(s.length() == 0)
		return false;
        for (int i=0; i<disallowed.length; i++) {
            if(disallowed[i].toUpperCase().equals(s.toUpperCase()))
                return false;
        }
        return true;
    }
    
    private boolean validateDistribution(String s) {
	if(s.length() == 0)
		return false;
	else if(s.indexOf("()")!=-1)
		return false;
	else if(s.indexOf("(")==-1 && s.indexOf(")")==-1)
		return false;
	else
		return true;
    }

    private boolean validateDouble(String s, double min, double max) {
        double d = -1.0;
        try {
            d = new Double(s).doubleValue();
            if(d<min || d>max)
		    return false;
        }
        catch (NumberFormatException e) {
            return false;
        }
        return true;
    }

    private boolean validateDouble(String s, double min, String minP, String minTFVal, double max, String maxP, String maxTFVal) {
        double d = -1.0;
        if (minP!=null) {
            for(int i=0;i<allParams.length;i++) {
                if(allParams[i].getLabel().equals(minP)) {
                    min = new Integer(minTFVal).intValue();
                }
            }
        }
        if (maxP!=null) {
            for(int i=0;i<allParams.length;i++) {
                if(allParams[i].getLabel().equals(maxP)) {
                    max = new Integer(maxTFVal).intValue();
                }
            }
        }
        try {
            d = new Double(s).doubleValue();
            if(d<min || d>max)
		    return false;
        }
        catch (NumberFormatException e) {
            return false;
        }
        return true;
    }

    private void setValidationError(JTextField tf, JLabel lbl) {
        tf.setText("");
        addError(getErrMsg(tf.getName()),lbl.getForeground()==Color.BLACK);
        lbl.setForeground(java.awt.Color.RED);
    }
    
    private void setValidationError(JList l, JLabel lbl) {
        addError(getErrMsg(l.getName()),lbl.getForeground()==Color.BLACK);
        lbl.setForeground(java.awt.Color.RED);
    }
    
    private void setValidationError(JComboBox cmb, JTextField tf, JLabel lbl) {
        tf.setText("");
        String error = getErrMsg(cmb.getName())+ "\nOR" + getErrMsg(tf.getName());
        addError(error,lbl.getForeground()==Color.BLACK);
        lbl.setForeground(java.awt.Color.RED);
    }
    
    private void setValidationError(JComboBox cmb, JLabel lbl) {
        addError(getErrMsg(cmb.getName()),lbl.getForeground()==Color.BLACK);
        lbl.setForeground(java.awt.Color.RED);
    }
    
    private void setValidationError(JRadioButton rb, JLabel lbl) {
        addError(getErrMsg(rb.getName()),lbl.getForeground()==Color.BLACK);
        lbl.setForeground(java.awt.Color.RED);
    }
    
    private void setValidationError(JRadioButton rb, JTextField tf, JLabel lbl) {
        tf.setText("");
        String error = getErrMsg(rb.getName())+ "\nOR" + getErrMsg(tf.getName());
        addError(error,lbl.getForeground()==Color.BLACK);
        lbl.setForeground(java.awt.Color.RED);
    }

    private void addError(String error, boolean needed) {
        String allErrors = errors.toString();
        if(allErrors.indexOf(error)==-1 && needed)
            errors.append(error);
    }

    private void checkErrors() {
	main.taMsgs.append(errors.toString());
        main.taMsgs.setCaretPosition(main.taMsgs.getDocument().getLength());
        errors = new StringBuffer();
    }
    
    private void resetLabel(JLabel l) {
        l.setForeground(java.awt.Color.BLACK);
    }

    /**
     * Handle loss of focus on a field event
     * @param e event
     */    
    public void focusLost(java.awt.event.FocusEvent e) {
        if(e.getComponent()==null || e.getComponent().getName()==null)
		return;
        if(e.getOppositeComponent()==null || e.getOppositeComponent().getName()==null)
		return;
	int i = e.getComponent().getName().indexOf("cmd")+3;
	String cmd = e.getComponent().getName().substring(i,e.getComponent().getName().indexOf("_",i));
        if(e.getOppositeComponent().getName().indexOf("cmd"+cmd)!=-1) // check if on same command
		validateAllFields();
    }

    public Action okAction = new AbstractAction() {
        public void actionPerformed(ActionEvent e) {
            handleOKButton(replace, append);
        }
    };

    /**
     * Handle component shown event
     * @param componentEvent event
     */    
    public void componentShown(java.awt.event.ComponentEvent componentEvent) {
        try {
	    getParams();
            JPanel pnl = (JPanel)componentEvent.getComponent();
            JComponent firstComp = (JComponent)pnl.getComponent(0);
            for (int i=0;i<firstComp.getComponentCount();i++) {
                JComponent nextComp = (JComponent)firstComp.getComponent(i);
                boolean success = testFocus(nextComp);
                if(success)
                    break;
            }
        }
        catch (Exception e) {
            System.out.println("Error trying to set focus: "+e.getMessage());
            e.printStackTrace();
        }
    }
    
    private boolean testFocus(JComponent comp) {
        String name = comp.getClass().getName();
        if(name.indexOf("JTextField")!=-1  || name.indexOf("JComboBox")!=-1 || name.indexOf("JCheckBox")!=-1 || name.indexOf("JRadioButton")!=-1) {
            comp.requestFocus();
            return true;
        }
        for(int j=0;j<comp.getComponentCount();j++) {
            String classname = comp.getClass().getName();
            String superclass = comp.getClass().getSuperclass().getName();
            if(superclass.indexOf(".J")!=-1 || superclass.indexOf("Box")!=-1) {
                Component aComp = comp.getComponent(j);
                classname = aComp.getClass().getName();
                superclass = aComp.getClass().getSuperclass().getName();
                if(superclass.indexOf(".J")!=-1 || superclass.indexOf("Box")!=-1) {
                    JComponent anotherComp = (JComponent)comp.getComponent(j);
                    if(testFocus(anotherComp))
                        return true;
                }
            }
        }
        return false;
    }

    // These have to be here even though they do nothing
    public void focusGained(java.awt.event.FocusEvent e) {
    }

    public void componentHidden(java.awt.event.ComponentEvent componentEvent) {
    }
    
    public void componentMoved(java.awt.event.ComponentEvent componentEvent) {
    }
    
    public void componentResized(java.awt.event.ComponentEvent componentEvent) {
    }
    

} '''
		out.write('%s\n' % closing)

	def writeAvailableFields(self, out):
		out.write('\t/**\n')
		out.write('\t *Disable any fields that should not be available to the user\n')
		out.write('\t*/\n')
		out.write('\tpublic void availableFields() {\n')
		out.write('\t\ttry {\n')
		for cmdParamGroup in self.cmd_param_group:
			for cmdParam in cmdParamGroup.cmd_param:
				if cmdParam.availability != None:
					cmdParam.writeAvailability(out)
		out.write('\t\t}\n')
		out.write('\t\tcatch (NumberFormatException e){\n')
		out.write('\t\t\t//no problem, field probably not set yet\n')
		out.write('\t\t}\n')
		out.write('\t}\n\n')

	def writeActionValidation(self, out):
		out.write('\t/**\n')
		out.write('\t * Ensure all values entered in gui fields are valid\n')
		out.write('\t * @return <CODE>true</CODE> if all fields valid\n')
		out.write('\t */\n')
		out.write('\tpublic boolean validateAllFields() {\n')
		out.write('\t\tsuccess = true;\n')
		for cmdParamGroup in self.cmd_param_group:
			for cmdParam in cmdParamGroup.cmd_param:
				cmdParam.writeActionGetValues(out)
		out.write('\t\tavailableFields();\n')
		for cmdParamGroup in self.cmd_param_group:
			for cmdParam in cmdParamGroup.cmd_param:
				cmdParam.writeActionValidation(out)
		for cmdParamGroup in self.cmd_param_group:
			for cmdParam in cmdParamGroup.cmd_param:
				cmdParam.writeRequirements(out)
		self.writeRequirements(out) 
		self.writeAvailability(out) 
		#out.write('\t\tif(success) {\n')
		#reset labels
		#for cmdParamGroup in self.cmd_param_group:
		#	for cmdParam in cmdParamGroup.cmd_param:
		#		cmdParam.writeResetLabels(out)
		#out.write('\t\t}\n')
		out.write('\t\tcheckErrors();\n')
		out.write('\t\treturn success;\n')
		out.write('\t}\n\n')

	def writeRequirements(self, out):
		for req in self.requirement:
			if performTestInGUI(req):
				aTestInfo = req.test_info
				for cmdParamGroup in self.cmd_param_group:
					for cmdParam in cmdParamGroup.cmd_param:
						label = ""
						if aTestInfo.logicalOp != None:
							label = aTestInfo.logicalOp.left_operand.label.getRawChars()
						elif aTestInfo.comparison != None:
							label = aTestInfo.comparison.left_operand.label.getRawChars()
						elif aTestInfo.predicate != None:
							label = aTestInfo.predicate.label.getRawChars()
						if label == cmdParam.label.getRawChars():
							cmdParam.writeTest(out, aTestInfo);

	def writeAvailability(self, out):
		for avail in self.availability:
			if performTestInGUI(avail):
				aTestInfo = avail.test_info
				for cmdParamGroup in self.cmd_param_group:
					for cmdParam in cmdParamGroup.cmd_param:
						label = ""
						if aTestInfo.logicalOp != None:
							label = aTestInfo.logicalOp.left_operand.label.getRawChars()
						elif aTestInfo.comparison != None:
							label = aTestInfo.comparison.left_operand.label.getRawChars()
						elif aTestInfo.predicate != None:
							label = aTestInfo.predicate.label.getRawChars()
						if label == cmdParam.label.getRawChars():
							cmdParam.writeTest(out, aTestInfo);

	
	def writeActionCmdString(self, out):
		s = '''
        /**
         * Handle event on gui window
         * @param e event
         */        
	public void actionPerformed(ActionEvent e) {

        '''
		s2 = '''
		if(e.getActionCommand().equals("okAction")) {
			handleOKButton(replace,append);
		}
	}
        '''
		s3 = '''
        /**
         * Handle selection of OK button
         * @param replace <CODE>true</CODE> if a parameter is a filename and user chose to replace
         * @param append <CODE>true</CODE> if a parameter is a filename and user chose to append
         */        
	public void handleOKButton(boolean replace, boolean append) {
		boolean success = validateAllFields();
                if(success) 
                    setParams();
                else
                    return;'''
		out.write('%s' % s)
		for cmdParamGroup in self.cmd_param_group:
			for cmdParam in cmdParamGroup.cmd_param:
				cmdParam.writeActionFileChooser(out)
		for cmdParamGroup in self.cmd_param_group:
			for cmdParam in cmdParamGroup.cmd_param:
				cmdParam.writeActionDistribChooser(out)
		for cmdParamGroup in self.cmd_param_group:
			for cmdParam in cmdParamGroup.cmd_param:
				cmdParam.writeActionComboListSelect(out)
		out.write('%s' % s2)
		out.write('%s\n' % s3)
		out.write('\t\tStringBuffer commandString = new StringBuffer("%s");\n ' % self.getCommandName())
		cmdParamPlacement = []
		for cmdParamGroup in self.cmd_param_group:
			for cmdParam in cmdParamGroup.cmd_param:
				if(cmdParam.placement.isdigit()):
					cmdParamPlacement.append(cmdParam.placement)
		cmdParamPlacement.sort()
		# cmdParam's with no label must come first and in order
		for place in cmdParamPlacement:
			for cmdParamGroup in self.cmd_param_group:
				for cmdParam in cmdParamGroup.cmd_param:
					if(len(cmdParam.label)==0 and place==cmdParam.placement):
						cmdParam.writeActionCmdString(out)
		# now do all other params
		for cmdParamGroup in self.cmd_param_group:
			for cmdParam in cmdParamGroup.cmd_param:
				if(len(cmdParam.label)>0):
					cmdParam.writeActionCmdString(out)
		out.write('\t\tcommandString.append(";available;");\n')

	def writeActionWrapUp(self, out): 
		out.write('\t\t\tif(success) {\n')
		wuEnd = r'''	main.taMsgs.append(main.ATTEMPT_MSG);
				main.taMsgs.append("\n"+commandString.toString());
                                main.taMsgs.setCaretPosition(main.taMsgs.getDocument().getLength());
				String response = "";
				try {
                                        main.updateLastPageViewed(commandName);
                                        main.mi_welcome.doClick();
					main.socket.writeToSocket(commandString.toString());
					main.taMsgs.append(main.SUCCESS_MSG);
	                                main.taMsgs.setCaretPosition(main.taMsgs.getDocument().getLength());
				}
				catch (Exception exc) {
					exc.printStackTrace();
					main.taMsgs.append(main.WRITE_ERR_MSG);
	                                main.taMsgs.setCaretPosition(main.taMsgs.getDocument().getLength());
				}
			}
		}'''
		out.write('\t\t\t%s\n' % wuEnd)

	def writeGetErrMsgs(self, out):
		out.write('\n\tprivate String getErrMsg(String tfName) {\n')
		out.write('\t\tString ret = "";\n')
		for cmdParamGroup in self.cmd_param_group:
			for cmdParam in cmdParamGroup.cmd_param:
				cmdParam.writeGetErrMsgs(out)
		out.write('\t\treturn ret;\n\t}\n\n')

	def writeItemStateChanged(self, out):
		out.write('\n\t/**\n')
		out.write('\t* Handle checkbox selection/deselection event\n')
		out.write('\t* @param itemEvent event\n')
		out.write('\t*/\n')
		out.write('\n\tpublic void itemStateChanged(java.awt.event.ItemEvent itemEvent) {\n')
		for cmdParamGroup in self.cmd_param_group:
			for cmdParam in cmdParamGroup.cmd_param:
				cmdParam.writeItemStateChanged(out)
		out.write('\t}\n\n')

class CommandSet(SAXConstructible):
	def writeOutput(self):
		for command in self.command:
			command.writeOutput()

class CommandList(SAXConstructible):
	def writeOutput(self):
		for commandSet in self.command_set:
			if((commandSet.user_interface=='all') or (commandSet.user_interface=='gui') or (commandSet.user_interface=='batch|gui') or (commandSet.user_interface=='console|gui')) :
				commandSet.writeOutput()

if __name__ == '__main__':
	TextOnlyElement.automaticallyConvertToString = True
	SAXConstructible.initializeFromClassStatic = True
	writingNCL = False
	pathToPhycasRoot = len(sys.argv) > 1 and sys.argv[1] or '../../../..'
	filename = len(sys.argv) > 2 and sys.argv[2] or os.path.join(pathToPhycasRoot, 'gui', 'xml', 'all_commands.xml')
	outputParentPath = len(sys.argv) > 3 and sys.argv[3] or os.path.join(pathToPhycasRoot, 'gui', 'phycasGUI', 'swixml')
	initStaticsFile = pathToPhycasRoot + '/python/phycas_sax_init_util.py'
	execfile(initStaticsFile)
	cmdList = CommandList('phyc:command_list', {})
	if not cmdList.parseFile(filename):
		print filename, ' not parsed'
		sys.exit(1)
	print filename, ' parsed'
	cmdList.writeOutput()
